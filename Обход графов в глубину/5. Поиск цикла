def dfs(status, point, v_before):
    status[point] = 1
    for neigh in range(1, len(matrix[point])):
        if neigh == v_before:
            continue
        if matrix[point][neigh] == 1:
            if status[neigh] == 1:
                loop_start_v = neigh
                for i in list(reversed(road_map)):
                    loop_list.append(i)
                    if i == loop_start_v:
                        print('YES', len(loop_list), ' '.join(map(str, loop_list)), sep='\n')
                        exit()
            elif status[neigh] == 0:
                road_map.append(neigh)
                dfs(status, neigh, point)
    status[point] = 2
    road_map.pop()
    return


file = open('input.txt', 'r')
quan_v = int(file.readline().strip())
matrix = [[0] for _ in range(quan_v + 1)]
loop_list = []
count = 1
for line in file.readlines():
    matrix[count].extend(map(int, line.strip().split(' ')))
    count += 1

status_list = [0] * (quan_v + 1)
for v in range(1, quan_v + 1):
    road_map = [v]
    dfs(status_list, v, 0)
print('NO')
